@{ Layout = null;}
@using Dreamfly.JavaEstateCodeGenerator.Core
@model Dreamfly.JavaEstateCodeGenerator.Models.RenderEntity
/**
* @@author: @Model.Author.Name
* @@Email: @Model.Author.Email
* @@Description: @Model.Author.Remark
*/
@{
    var dtoTemplates = Model.EntityItems.Where(t=>t.InResponse);
    bool hasJsonField = Model.EntityItems.Any(t => t.Type == AppConstants.JsonMapType);
    bool hasDecimal = Model.EntityItems.Any(t => t.Type == "BigDecimal" && t.Length.HasValue);
    var relateItems=Model.EntityItems.Where(t=>t.RelateType=="OneToOne" || t.RelateType=="ManyToOne").ToList();
}
package @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectHasApi?".api":"").dto.@(Model.EntityName.ToLower());

@foreach (var item in relateItems){
if(item.RelateEntity!=Model.EntityName){    
@:import @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectHasApi?".api":"").dto.@(item.RelateEntity.ToLower()).@(item.RelateEntity)Response;
}
}
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import com.fasterxml.jackson.annotation.JsonFormat;
import @(Model.ProjectPackagePath).common.config.AppConstant;
import lombok.*;

import java.util.Date;
@if (hasJsonField)
{
@:import java.util.List;
}
@if (hasDecimal)
{
@:import java.math.BigDecimal;
}
@@Data
@@Builder
@@NoArgsConstructor
@@AllArgsConstructor
@@ApiModel(value = "@Html.Raw(Model.EntityDescription)返回表單")
public class @(Model.EntityName)Response {
    @@JsonSerialize(using = ToStringSerializer.class)
    @@ApiModelProperty(value = "編號")
    private Long id;
@foreach (var item in dtoTemplates)
{
    var itemType=item.Type;
if (!String.IsNullOrEmpty(item.Description))
{
    @:/**
    @:* @Html.Raw(item.Description)
    @:*/
    @:@@ApiModelProperty(value = "@Html.Raw(item.Description)")
}
if (item.Type=="Date")
{
    @:@@JsonFormat(timezone = AppConstant.DATE_FORMAT_TIMEZONE, pattern=@(item.HasTime?"AppConstant.DATE_FORMAT_DATETIME_PATTERN":"AppConstant.DATE_FORMAT_DATE_PATTERN"))
}
if (item.Type == "Text")
{
    itemType = "String";
}
if(item.RelateType=="OneToOne"||item.RelateType=="ManyToOne"){
    itemType=$"{item.RelateEntity}Response";
}
    @:private @Html.Raw(itemType) @item.Name;
}
}