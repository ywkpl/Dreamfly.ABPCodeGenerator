@{ Layout = null;}
@using System.Net.Mime
@using Dreamfly.JavaEstateCodeGenerator.Core
@model Dreamfly.JavaEstateCodeGenerator.Models.RenderEntity
/**
* @@author: @Model.Author.Name
* @@Email: @Model.Author.Email
* @@Description: @Model.Author.Remark
*/
@{
    bool hasJsonField = Model.EntityItems.Any(t => t.Type == AppConstants.JsonMapType);
    bool hasDecimal = Model.EntityItems.Any(t => t.Type == "BigDecimal" && t.Length.HasValue);
}
package @(Model.ProjectPackagePath).@(Model.ProjectName).model;

import @(Model.ProjectPackagePath).common.model.*;
import lombok.*;
import lombok.experimental.SuperBuilder;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
@if (hasDecimal)
{
@:import javax.validation.constraints.Digits;
@:import java.math.BigDecimal;
}
@if (hasJsonField)
{
@:import com.vladmihalcea.hibernate.type.json.JsonStringType;
@:import org.hibernate.annotations.Type;
@:import org.hibernate.annotations.TypeDef;
@:import java.util.List;
}

@@Data
@@SuperBuilder
@@AllArgsConstructor
@@NoArgsConstructor
@@Entity
@@Table(name = "@(String.IsNullOrEmpty(Model.TableName) ? Model.EntityName : Model.TableName)")
@if (hasJsonField)
{
@:@@TypeDef(name="json",typeClass = JsonStringType.class)
}
//@@EqualsAndHashCode(callSuper = true, exclude = { "tenant"})
//@@ToString(callSuper = true, exclude = "tenant")
public class @(Model.EntityName) extends FullAudited implements Serializable@(Model.EntityHasICompany?", IHaveCompany":"")@(Model.EntityHasITenant?", IHaveTenant":"") {
@foreach (var item in Model.EntityItems)
{
    var columns = new List<String>();
    if (item.IsRequired)
    {
        columns.Add("nullable = false");
    }
    if (item.Length.HasValue && item.Type!="BigDecimal")
    {
        columns.Add($"length = {item.Length.Value}");
    }
    if (!String.IsNullOrEmpty(item.ColumnName))
    {
        columns.Add($"name = \"{item.ColumnName}\"");
    }
    if (@item.Type == "List<String>")
    {
        columns.Add($"columnDefinition = \"json\"");
    }
    if (!String.IsNullOrEmpty(item.Description))
    {
    @:/**
    @:* @Html.Raw(item.Description)
    @:*/
    }
    if (columns.Count > 0)
    {
    @:@@Column(@Html.Raw(String.Join(", ", columns)))
    }
    if (item.Type == "List<String>")
    {
    @:@@Type( type = "json" )
    }
    if (item.Type == "BigDecimal" && item.Length.HasValue)
    {
    @:@@Digits( integer = @(item.Length), fraction = @(item.Fraction))
    }
    if (item.Type == "Text")
    {
        item.Type = "String";
    @:@@Lob
    }
    if (!String.IsNullOrEmpty(item.RelateType)){
    @:@@@(item.RelateType)
        if(item.RelateType=="ManyToOne"){
            
        }
        item.Type=item.RelateEntityName;
    }
    @:private @Html.Raw(item.Type) @item.Name;
}
}