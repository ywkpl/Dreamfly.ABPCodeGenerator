@{ Layout = null;}
@using Dreamfly.JavaEstateCodeGenerator.Helper
@using Dreamfly.JavaEstateCodeGenerator.Core
@model Dreamfly.JavaEstateCodeGenerator.Models.RenderEntity
/**
* @@author: @Model.Author.Name
* @@Email: @Model.Author.Email
* @@Description: @Model.Author.Remark
*/
@{
    bool hasJsonField = Model.EntityItems.Any(t => t.Type == AppConstants.JsonMapType);
    bool hasDecimal = Model.EntityItems.Any(t => t.Type == "BigDecimal" && t.Length.HasValue);
    var sets=Model.EntityItems.Where(t=>t.Type=="Set").Select(t=>"\""+t.Name+"\"").ToList();
}
package @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectIsShare?".api":"").model;

import @(Model.ProjectPackagePath).baseinfo.api.model.*;
import @(Model.ProjectPackagePath).common.model.*;
import lombok.*;
import lombok.experimental.SuperBuilder;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
@if (hasDecimal)
{
@:import javax.validation.constraints.Digits;
@:import java.math.BigDecimal;
}
@if (hasJsonField)
{
@:import com.vladmihalcea.hibernate.type.json.JsonStringType;
@:import org.hibernate.annotations.Type;
@:import org.hibernate.annotations.TypeDef;
@:import java.util.List;
}

@@Data
@@SuperBuilder
@@AllArgsConstructor
@@NoArgsConstructor
@@Entity
@@Table(name = "@(String.IsNullOrEmpty(Model.TableName) ? Model.EntityName : Model.TableName)")
@if (hasJsonField)
{
@:@@TypeDef(name="json",typeClass = JsonStringType.class)
}
@if(sets.Count>0){
@:@@EqualsAndHashCode(callSuper = true, exclude = { @Html.Raw(String.Join(", ", sets)) })
@:@@ToString(callSuper = true, exclude = { @Html.Raw(String.Join(", ", sets)) })    
}
public class @(Model.EntityName) extends FullAudited implements Serializable@(Model.EntityHasICompany?", IHaveCompany":"")@(Model.EntityHasITenant?", IHaveTenant":"") {
@foreach (var item in Model.EntityItems.OrderBy(t=>t.Order))
{
    if (!String.IsNullOrEmpty(item.Description)){
    @:/**
    @:* @Html.Raw(item.Description)
    @:*/
    }
    string itemType=item.Type;
    string itemName=item.Name;
    string relateTypeStr="", joinStr="";
    //存在关联
    if(!String.IsNullOrEmpty(item.RelateType)){
        relateTypeStr=$"@{item.RelateType}";
        bool hasCascade=!String.IsNullOrEmpty(item.CascadeType);
        bool hasFetchType=!String.IsNullOrEmpty(item.FetchType);
        bool hasMappedBy=item.RelateDirection=="MappedBy";
        var relateAttributes = new List<String>();        
        //关联名称暂未确定
        if(hasMappedBy) {relateAttributes.Add($"mappedBy = \"{item.ColumnName}\"");}
        if(hasCascade) {relateAttributes.Add($"cascade = {item.CascadeType}");}
        if(hasFetchType) {relateAttributes.Add($"fetch = {item.FetchType}");}
        if(relateAttributes.Count>0) {
            relateTypeStr += $"({String.Join(", ", relateAttributes)})";
        }

        if(item.RelateDirection=="Join"){
            var joinAttributes = new List<String>();        
            if(item.RelateType=="ManyToMany"){
                joinStr=$"@JoinTable";
                joinAttributes.Add($"name = \"{item.ColumnName}\"");
                joinAttributes.Add($"joinColumns = @JoinColumn(name = \"{Model.EntityName}Id\", foreignKey = @ForeignKey(name = \"FK_{item.ColumnName}_{Model.EntityName}Id\"))");
                joinAttributes.Add($"inverseJoinColumns = @JoinColumn(name =\"{item.RelateEntity}Id\", foreignKey = @ForeignKey(name = \"FK_{item.ColumnName}_{item.RelateEntity}Id\"))");
            }else{
                joinStr=$"@JoinColumn";
                joinAttributes.Add($"name = \"{item.ColumnName}\"");
                string foreignStr= String.IsNullOrEmpty(item.ForeignKeyName)?
                    $"foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT)":
                    $"foreignKey = @ForeignKey(name = \"{item.ForeignKeyName}\")";
                joinAttributes.Add(foreignStr);
            }
            if(joinAttributes.Count>0){
                joinStr+=$"({String.Join(", ", joinAttributes)})";
            }
        }

        if(item.RelateType=="OneToOne" || item.RelateType=="ManyToOne") {
            itemType=item.RelateEntity;
        }
        if(item.RelateType=="OneToMany" || item.RelateType=="ManyToMany"){
            itemType=$"{itemType}<{item.RelateEntity}>";
            //名称添加new HashSet<>()
            itemName +=" = new HashSet<>()";
        }
    }else{
        var columns = new List<String>();
        if (item.IsRequired)
        {
            columns.Add("nullable = false");
        }
        if (item.Length.HasValue && item.Type!="BigDecimal")
        {
            columns.Add($"length = {item.Length.Value}");
        }
        if (!String.IsNullOrEmpty(item.ColumnName) && String.IsNullOrEmpty(item.RelateType))
        {
            columns.Add($"name = \"{item.ColumnName}\"");
        }
        if (@item.Type == "List<String>")
        {
            columns.Add($"columnDefinition = \"json\"");
        }
        if (columns.Count > 0)
        {
    @:@@Column(@Html.Raw(String.Join(", ", columns)))
        }
    }
    if (item.Type == "List<String>")
    {
    @:@@Type( type = "json" )
    }
    if (item.Type == "BigDecimal" && item.Length.HasValue)
    {
    @:@@Digits( integer = @(item.Length), fraction = @(item.Fraction))
    }
    if (item.Type == "Text")
    {
        itemType = "String";
    @:@@Lob
    }
    if (!String.IsNullOrEmpty(item.RelateType)){
    if(!String.IsNullOrEmpty(relateTypeStr)){
    @:@Html.Raw(relateTypeStr)
    }
    if(!String.IsNullOrEmpty(joinStr)){
    @:@Html.Raw(joinStr)
    }
    }
    @:private @Html.Raw(itemType) @Html.Raw(itemName);
}
}