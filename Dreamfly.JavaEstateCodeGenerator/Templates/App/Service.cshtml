@{ Layout = null;}
@using Dreamfly.JavaEstateCodeGenerator.Helper
@model Dreamfly.JavaEstateCodeGenerator.Models.RenderEntity
/**
* @@author: @Model.Author.Name
* @@Email: @Model.Author.Email
* @@Description: @Model.Author.Remark
*/
@{
    var entityItems = Model.EntityItems.Where(t=>t.InQuery);
}
package @(Model.ProjectPackagePath).@(Model.ProjectName).service;

import @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectHasApi?".api":"").dto.@(Model.EntityName.ToLower()).*;
import @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectIsShare?".api":"").mapper.@(Model.EntityName)Mapper;
import @(Model.ProjectPackagePath).@(Model.ProjectName)@(Model.ProjectIsShare?".api":"").model.@(Model.EntityName);
import @(Model.ProjectPackagePath).common.dto.EntityRequest;
import @(Model.ProjectPackagePath).common.exception.ServiceException;
import @(Model.ProjectPackagePath).common.service.CrudApplicationService;
import org.apache.logging.log4j.util.Strings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.Predicate;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@@Service
public class @(Model.EntityName)Service extends CrudApplicationService<@(Model.EntityName), @(Model.EntityName)AllResponse, @(Model.EntityName)Response, EntityRequest, Create@(Model.EntityName)Request, Update@(Model.EntityName)Request, GetAll@(Model.EntityName)Request> {

    public @(Model.EntityName)Service(@(Model.EntityName)Mapper mapper) {
        super(mapper);
    }

    @@Override
    public Specification<@(Model.EntityName)> makeSpecification(GetAll@(Model.EntityName)Request input) {
        Specification<@(Model.EntityName)> specification= (root, query, builder) -> {
            List<Predicate> predicates=new ArrayList<>();
    @foreach (var item in entityItems)
    {
        if (item.Type == "String")
        {
            @:if (Strings.isNotBlank(input.get@(item.Name.ToPascalCase())())) {
                @:predicates.add(builder.like(root.get("@(item.Name.ToCamelCase())"), "%" + input.get@(item.Name.ToPascalCase())() + "%"));
            @:}
        }
        if (item.Type == "Long")
        {
            @:if (input.get@(item.Name.ToPascalCase())() != null){
                @:predicates.add(builder.equal(root.get("@(item.Name.ToCamelCase())"), input.get@(item.Name.ToPascalCase())()));
            @:}
        }
        if (item.Type == "Date")
        {
            @:if (input.getStart@(item.Name.ToPascalCase())() != null){
                @:predicates.add(builder.greaterThanOrEqualTo(root.get("@(item.Name.ToCamelCase())"), input.getStart@(item.Name.ToPascalCase())()));
            @:}
            @:if (input.getEnd@(item.Name.ToPascalCase())() != null){
                @:predicates.add(builder.lessThanOrEqualTo(root.get("@(item.Name.ToCamelCase())"), input.getEnd@(item.Name.ToPascalCase())()));
            @:}
        }
    }
            return builder.and(predicates.toArray(new Predicate[predicates.size()]));
        };
        return specification;
    }
}